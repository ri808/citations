# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BtIYgQN-flVn26CFNIlJOhA-XTWngQSl
"""

import streamlit as st
from datetime import datetime
import matplotlib.pyplot as plt
from PIL import Image
import base64

# --- Page config ---
st.set_page_config(
    page_title="Student Made CIU Citation Analyzer",
    page_icon="ðŸ“š",
    layout="centered"
)

# Load images
background_image_path = "student_image.jpg"  # Make sure this file is in the same folder as this script
books_image_path = "books.jpg"  # Also make sure this file is present

# Read and encode background image for CSS
def get_base64_of_bin_file(bin_file):
    with open(bin_file, 'rb') as f:
        data = f.read()
    return base64.b64encode(data).decode()

background_base64 = get_base64_of_bin_file(background_image_path)

# CSS for background image, overlay, and black text
st.markdown(
    f"""
    <style>
    /* Background image full page */
    .stApp {{
        background-image: url("data:image/jpg;base64,{background_base64}");
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        position: relative;
        min-height: 100vh;
    }}

    /* Semi-transparent light overlay for contrast */
    .overlay {{
        position: fixed;
        top: 0; left: 0; right: 0; bottom: 0;
        background-color: rgba(255, 255, 255, 0.55);
        z-index: -1;
    }}

    /* Main content container with black text */
    .main-content {{
        color: #000000 !important;
        padding: 2rem 3rem;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        min-height: 100vh;
    }}

    /* Sidebar styling with black text */
    [data-testid="stSidebar"] {{
        background-color: rgba(255, 255, 255, 0.8);
        color: #000000 !important;
        font-weight: 600;
    }}

    /* Buttons */
    .stButton>button {{
        background-color: #00509E;
        color: white;
        border-radius: 8px;
        padding: 0.5em 1em;
        border: none;
        font-weight: 600;
        box-shadow: 1px 1px 5px rgba(0,0,0,0.6);
        transition: background-color 0.3s ease;
    }}
    .stButton>button:hover {{
        background-color: #003f6f;
    }}

    /* Pie chart text */
    .pie-label {{
        fill: black !important;
        font-weight: 700;
        font-size: 14px;
    }}
    </style>
    <div class="overlay"></div>
    """,
    unsafe_allow_html=True,
)

# Sidebar navigation and info
st.sidebar.title("Navigation")
st.sidebar.info(
    """
    Upload your RIS citation file to get summary statistics.
    The peer-reviewed status is based on presence of a DOI.
    """
)

# Main container start
st.markdown('<div class="main-content">', unsafe_allow_html=True)

# Title and intro image
st.title("Citation Analyzer and Summarization for CIU PhD Cohort")
st.write(
    """
    Upload your RIS citation file to analyze citations based on peer-reviewed status (DOI presence).
    """
)

# Load and show the books image
books_image = Image.open(books_image_path)
st.image(books_image, caption="Welcome to the Citation Analyzer!", use_container_width=True)

# File uploader
uploaded_file = st.file_uploader("Upload your RIS citation file", type=["ris", "txt"])

def parse_ris(file_content):
    entries = []
    entry = {}
    for line in file_content.splitlines():
        line = line.strip()
        if line.startswith("TY  -"):
            entry = {}
        elif line.startswith("ER  -"):
            if entry:
                entries.append(entry)
                entry = {}
        elif "  - " in line:
            key, value = line.split("  - ", 1)
            if key in entry:
                entry[key].append(value)
            else:
                entry[key] = [value]
    return entries

def analyze_entries(entries):
    total_peer_reviewed = 0
    recent_peer_reviewed = 0
    current_year = datetime.now().year

    for entry in entries:
        doi_list = entry.get('DO', [])
        if doi_list and any(doi.strip() for doi in doi_list):
            total_peer_reviewed += 1
            year_values = entry.get('PY', []) or entry.get('Y1', [])
            for year_val in year_values:
                try:
                    year = int(year_val.strip()[:4])
                    if year >= 2022:
                        recent_peer_reviewed += 1
                        break
                except:
                    continue

    percent_recent = (recent_peer_reviewed / total_peer_reviewed) * 100 if total_peer_reviewed > 0 else 0
    return len(entries), total_peer_reviewed, recent_peer_reviewed, percent_recent

if uploaded_file is not None:
    # Read and parse the file
    file_content = uploaded_file.read().decode("utf-8")
    entries = parse_ris(file_content)
    total_entries, total_peer, recent_peer, percent = analyze_entries(entries)

    st.success(f"âœ… Successfully uploaded file: **{uploaded_file.name}**")
    st.write(f"**Total citations in file:** {total_entries}")
    st.write(f"**Total peer-reviewed (DOI present):** {total_peer}")
    st.write(f"**Peer-reviewed since 2022:** {recent_peer}")
    st.write(f"**Percentage of recent peer-reviewed citations (2022+):** {percent:.2f}%")

    # Pie chart for composition
    labels = ['Peer-Reviewed (DOI present)', 'Non Peer-Reviewed (No DOI)']
    sizes = [total_peer, total_entries - total_peer]
    colors = ['#00509E', '#7F8C8D']

    fig, ax = plt.subplots()
    wedges, texts, autotexts = ax.pie(
        sizes,
        labels=labels,
        autopct='%1.1f%%',
        colors=colors,
        startangle=90,
        textprops={'color':'black', 'weight':'bold', 'fontsize':12}
    )
    ax.axis('equal')
    st.pyplot(fig)

    # Blurb about measurement
    st.markdown(
        """
        <p style='color:#000000; font-style: italic;'>
        <em>Note:</em> Peer-reviewed status is determined by the presence of a DOI in your citation records.
        This is a proxy and may not cover all cases perfectly.
        </p>
        """,
        unsafe_allow_html=True
    )

    # Thank you / Beta disclaimer message
    st.markdown(
        """
        <p style='color:#FFD700; font-weight:bold; text-shadow: 1px 1px 4px black;'>
        This tool is student-made and currently in <em>BETA testing</em>. Please do not rely on it for 100% accuracy,
        but it strives to provide helpful insights.
        </p>
        """,
        unsafe_allow_html=True
    )
else:
    st.info("Please upload an RIS file to analyze.")

# Close main container
st.markdown('</div>', unsafe_allow_html=True)